{"frames":[{"func":"st_read(\"Data/PA_Flood_Hazard_Zone.shp\") %>% st_intersection(., \n    states1 %>% filter(NAME == \"Pennsylvania\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"st_intersection(., states1 %>% filter(NAME == \"Pennsylvania\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"st_intersection.sf(., states1 %>% filter(NAME == \"Pennsylvania\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"geos_op2_df(x, y, geos_op2_geom(\"intersection\", x, y, ...))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"geos_op2_geom(\"intersection\", x, y, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"structure(unlist(lapply(y, function(yy) fn(x, yy, s2::s2_options(model = model, \n    ...))), recursive = FALSE), class = \"s2_geography\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unlist(lapply(y, function(yy) fn(x, yy, s2::s2_options(model = model, \n    ...))), recursive = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(y, function(yy) fn(x, yy, s2::s2_options(model = model, \n    ...)))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"fn(x, yy, s2::s2_options(model = model, ...))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recycle_common(as_s2_geography(x), as_s2_geography(y))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as_s2_geography(x)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as_s2_geography.sfc(x)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"st_as_s2.sfc(x, ..., oriented = oriented)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"s2::as_s2_geography(st_as_binary(x), ..., oriented = oriented)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as_s2_geography.WKB(st_as_binary(x), ..., oriented = oriented)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"s2_geog_from_wkb(x, oriented = oriented, check = check)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"wk::wk_handle(wkb, s2_geography_writer(oriented = oriented, check = check, \n    tessellate_tol = if (planar) {\n        tessellate_tol_m/s2_earth_radius_meters()\n    } else { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"wk_handle.wk_wkb(wkb, s2_geography_writer(oriented = oriented, \n    check = check, tessellate_tol = if (planar) {\n        tessellate_tol_m/s2_earth_radius_meters()\n    } else { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error : object 'knn' not found\n"}