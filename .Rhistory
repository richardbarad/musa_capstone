scale_fill_manual(values=pal,name='cluster')
counties <- rbind(tigris::counties(state='PA'),tigris::counties(state='DE'),tigris::counties(state='NJ'))
cluster_profile <- function(cluster){
results_filt <- results %>%
filter(clusters==cluster)
results_long_filt <- results_long %>%
filter(clusters==cluster)
cluster_medians_long <- cluster_medians %>%
select(-stat) %>%
pivot_longer(-clusters,names_to='variables',values_to='values') %>%
left_join(flags,by=c('variables','clusters'))
map <- ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=results_filt,aes(fill=as.factor(clusters)),color='transparent')+
scale_fill_manual(values=pal,name='cluster')+
geom_sf(data=counties,color='grey70',fill='transparent')+
geom_sf(data=states1,fill='transparent',color='gray10',linewidth=0.5)+
geom_sf_text(data=counties,aes(label=NAME),size=2,color='gray30')+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))
plot <- ggplot(data = cluster_medians_long %>% filter(clusters==cluster))+
geom_bar(aes(x=variables,y=values,fill=flag),stat='identity',width=0.7)+
geom_point(data=medians,aes(x=variables,y=value,color='Median'))+
geom_point(data=q3,aes(x=variables,y=value,color='Q3'))+
scale_fill_manual(values=c('gray90','orange','red'),name='Cluster Median Compared to Basin Median',labels=c('Near/Below Median','Above Median','Signicantly Above Median'))+
scale_color_manual(name='Basin Median',values=c('lightblue','blue'))+
theme_tufte()+
scale_x_discrete(name='Variables',labels=c('Air Quality','Fire Risk','Flood Risk','Health Hazard Index','Minority Population','No University Degree','Limited English Profficiency','Poverty','Hazardous Waste Proximity','Wastewater Discharge'))+
scale_y_continuous(limits=c(0,1),name='Median Scalled Value')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
grid.arrange(map,plot,nrow=1,widths=c(6,12))
}
cluster_profile(1)
cluster_profile(1)
cluster_profile(2)
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message=FALSE)
library(tidyverse)
library(tigris)
library(sf)
library(httr2)
library(tidycensus)
library(sfdep)
library(RSocrata)
library(terra)
library(gridExtra)
library(corrr)
library(corrplot)
library(caret)
library(flexclust)
library(kableExtra)
library(viridis)
library(RColorBrewer)
library('ggthemes')
options(tigris_use_cache = TRUE)
options(scipen = 999)
Environmental_Exposure_Component <- c('Ozone Levels','Diesel Particulate Matter','Toxic Air Emissions','Toxic Water Emissions','Pesticide Usage','Traffic Density','Compressor Stations','Children Lead Risk','')
Environmental_Effects_Component <- c('Fracking Wells','Conventional Oil and Gas wells','Railroad length','Land remediation sites','Hazardous Waste sites','Coal Mines','Impaired Water sites','Abandoned Mines','Municipal waste sites ')
Sensitive_pop_component = c('Asthma Prevalence','Population without health insurance','Cancer prevalence','Disabled Population','Coronary Heart Disease Prevalence','','','','')
Socioeconomic_component = c('High school degree','Population that does not speak English','Poverty Rate','Housing Burdened population','People of Color population','Unemployed population','Population over 65','Population under 5','')
cbind(Environmental_Exposure_Component,Environmental_Effects_Component,Sensitive_pop_component,Socioeconomic_component) %>%
kbl(col.names = c('Environmental Exposure Component','Environmental Effects Component','Sensitive Pop Component','Socioeconomic Component'),caption = "Table 1: Variables Used PennEnviroScreen") %>%
kable_minimal() %>%
kable_styling('striped',stripe_color = "green") %>%
add_header_above(header = c('Pollution Burden' = 2, 'Population Characteristic' = 2))
states1 <- states() %>%
filter(STUSPS %in% c('PA','NJ','DE','NY','MD')) %>% st_transform(26918)
states2 <- states1 %>% filter(STUSPS %in% c('PA','NJ','DE'))
de_river_basin <- st_read('https://services8.arcgis.com/5Wj4rmM3lycu9Zo6/arcgis/rest/services/DRB_SAs/FeatureServer/0/query?f=geojson&where=1=1') %>%
st_transform(26918)
study_area <- st_intersection(de_river_basin,st_union(states2))
ggplot()+
geom_sf(data=study_area,color='transparent',fill='orange')+
geom_sf(data=de_river_basin,color='lightblue', fill='transparent',linewidth=1.5)+
geom_sf(data=states2,color='black',fill='transparent')+
theme_void()
Variable = c('Air Pollution Index','Proximity to Legacy Polluion','Water Quality','Flood Risk','Wildfire Risk','Minority Population','Poverty','Education','Language Barrier','Public Health Hazard Index')
Source = c('EPA EJ Screen','EPA EJ Screen','EPA EJ Screen','FEMA','USDA','American Community Survey, 2022','American Community Survey, 2022','American Community Survey, 2022','American Community Survey, 2022','CDC PLACES DATASET')
Notes = c('Index calculated based on Particulate Matter in Air, ozone, Disel Particulate Matter in Air, Cancer Risk from inflation of Air Toxics, and Tradffic Volume and Proximity','Calculated based on Proximity to superfund sites, proximity to risk management facilities, and Proxmity to hazardous waste facilities','Modeled toxic concentrations at stream segments within 500 meters','Percent of Tracts located in the FEMA Flood Plain','Wildfire Likelihood (Chance of Fire in Any Year)','% of population that is not white','% of households below poverty line','% of population over 25 without post-secondary degree','% of Households with limited English Profficiency','Index Calcuated based on % of 18+ population with the following chronic conditions: arthritis, cancer, high cholestrol, asthma, history of stroke, depression, Coronary Hear Diseas, Diabetes and Obesity')
cbind(Variable,Source,Notes) %>%
kbl(caption = "Table 2: Variables Used in Cluster Analysis") %>%
kable_minimal() %>%
kable_styling('striped',stripe_color = "green")
#Income, #Language, #Education, #Percent of Income on Rent
vars <- c('B02001_001', #Total Population
'B02001_002', #White Only
'C16002_004', #Spanish, Limited English
'C16002_007', #Other Indo-European languages:!!Limited English speaking household
'C16002_010', #Asian and Pacific Island languages:!!Limited English speaking household
'C16002_013', #Estimate!!Total:!!Other languages:!!Limited English speaking household
'C16002_001', #Total
'B06009_002', #Less than graduate degree
'B06009_003', #High School Graduate
'B06009_001', #Total
'B06012_002',
'B06012_001')
process_acs <- function(state,level,vars,year){
census_data <- tidycensus::get_acs(level,
variables = vars,
year = year,
state = state,
geometry = TRUE,
output = 'wide') %>%
dplyr::select(ends_with('E'),GEOID)
}
census_tract <- rbind(process_acs('DE','tract',vars,2022),process_acs('PA','tract',vars,2022),process_acs('NJ','tract',vars,2022)) %>%
st_transform(26918) %>%
mutate (pct_minority = 100 - (B02001_002E / B02001_001E * 100),
pct_non_english = (C16002_004E + C16002_007E + C16002_010E + C16002_013E)/C16002_001E * 100,
pct_no_university = (B06009_002E + B06009_003E) / B06009_001E * 100,
pct_poverty =  (B06012_002E / B06012_001E * 100),
total_pop = B02001_001E)
basin_tracts <- st_centroid(census_tract) %>%
st_intersection(., study_area) %>%
dplyr::select(GEOID,NAME,pct_minority,pct_non_english,pct_poverty,pct_no_university,total_pop) %>%
st_drop_geometry() %>%
left_join(.,census_tract %>% dplyr::select (GEOID,geometry),by='GEOID') %>%
st_as_sf()
url <- httr2::url_parse("https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/EJScreen_StatePctiles_with_AS_CNMI_GU_VI_Tracts/FeatureServer/0/query")
url$query <- list(
where = "ST_ABBREV IN ('PA','DE','NJ')",
outFields = "ID,STATE_NAME,CNTY_NAME,PM25,OZONE,DSLPM,CANCER,RESP,PTRAF,PNPL,PTSDF,PRMP,PWDIS",
returnGeometry = "false",
f = "json"
)
final_url <- httr2::url_build(url)
epa_data <- sf::st_read(final_url)
hist(epa_data$PWDIS,breaks=300)
epa_data <- epa_data %>%
st_drop_geometry() %>%
rename(GEOID = ID) %>%
rename(AIR_CANCER = CANCER) %>%
rename(Wastewater = PWDIS)
places_pa <- read.socrata('https://data.cdc.gov/resource/cwsq-ngmh.csv?stateabbr=PA')
places_de <- read.socrata('https://data.cdc.gov/resource/cwsq-ngmh.csv?stateabbr=DE')
places_nj <- read.socrata('https://data.cdc.gov/resource/cwsq-ngmh.csv?stateabbr=NJ')
home_vars = c('B25034_001','B25034_011','B25034_010','B25034_009')
home_data <- rbind(process_acs('DE','tract',home_vars,2019),process_acs('PA','tract',home_vars,2019),process_acs('NJ','tract',home_vars,2019)) %>%
st_transform(26918) %>%
mutate (pct_old_homes = (B25034_011E + B25034_010E + B25034_009E) / B25034_001E * 100) %>%
select(pct_old_homes, GEOID) %>%
st_drop_geometry()
all_places <- rbind(places_pa,places_de,places_nj) %>%
filter(category == 'Health Outcomes') %>%
pivot_wider(id_cols='locationname',names_from='measureid',values_from='data_value') %>%
rename(GEOID = locationname) %>%
mutate(GEOID = as.character(GEOID)) %>%
dplyr::select(GEOID,ARTHRITIS,CANCER,CASTHMA,HIGHCHOL,DEPRESSION,STROKE,OBESITY,DIABETES,CHD) %>%
left_join(.,home_data,by='GEOID')
tracts2010 <- rbind(tracts(state='PA',year=2019),tracts(state='DE',year=2019),tracts(state='NJ',year=2019)) %>% st_transform(26918)
cpc_basin <- tracts2010 %>%
st_centroid() %>%
st_intersection(., study_area) %>%
st_drop_geometry() %>%
left_join(.,tracts2010 %>% dplyr::select (GEOID,geometry),by='GEOID') %>%
st_as_sf() %>%
select('STATEFP','GEOID','geometry') %>%
left_join(.,all_places,by='GEOID') %>%
drop_na()
cpc_basin %>%
st_drop_geometry() %>%
dplyr::select(ARTHRITIS,CANCER,CASTHMA,HIGHCHOL,DEPRESSION,STROKE,OBESITY,DIABETES,CHD,pct_old_homes) %>%
drop_na() %>%
cor() %>%
corrplot(addCoef.col = "black", number.cex = 0.7)
ggsave('outputs/cdc_plot.png')
cpc_no_geom <- cpc_basin %>%
st_drop_geometry() %>%
dplyr::select(ARTHRITIS,CANCER,CASTHMA,HIGHCHOL,DEPRESSION,STROKE,OBESITY,DIABETES,CHD,pct_old_homes)
process <- preProcess(cpc_no_geom, method=c("range"))
health_index <- predict(process, cpc_no_geom) %>% rowMeans()
min <- min(health_index)
max <- max(health_index)
health_hazard_index <- (health_index - min) / (max - min)
cpc_basin <- cbind(cpc_basin,health_hazard_index)
#Retain Four Components
pca <- prcomp(cpc_no_geom,center=TRUE,scale=TRUE)
summary(pca)
pca_index2<- pca$x[,1:5] %>% as_data_frame() %>%
mutate(PC1 = PC1 * -1,
PC2 = PC2 * -1,
PC3 = PC3 * -1,
PC4 = PC4 * -1,
PC5 = PC5 * -1) %>%
rowSums()
min <- min(pca_index2)
max <- max(pca_index2)
pca_index2 <- (pca_index2 - min) / (max - min)
cpc_basin <-cbind(cpc_basin,pca_index2)
boundings <- st_bbox(basin_tracts)
xmin = boundings[1]
ymin = boundings[2]
xmax = boundings[3]
ymax = boundings[4]
states_map <- states1 %>% erase_water(area_threshold=0.99)
p1 <- ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=cpc_basin,aes(fill= health_hazard_index),linewidth=0.2,color='transparent')+
scale_fill_distiller(palette = 'RdYlGn')+
geom_sf(data=states1,fill='transparent',color='gray10',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
ggtitle("Health Hazard Averaging Index")+
theme_void()+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))
p2 <- ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=cpc_basin,aes(fill=pca_index2),linewidth=0.2,color='transparent')+
scale_fill_distiller(palette = 'RdYlGn')+
geom_sf(data=states1,fill='transparent',color='gray10',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
ggtitle("Health Hazard PCA Index")+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))
grid.arrange(p1,p2,nrow=1)
ggsave('outputs/health.png')
basin_tracts_2 <- left_join(basin_tracts,epa_data,by='GEOID') %>% #Join tracts to EPA data
filter(total_pop > 0) %>% #Remove tracts with no population
mutate(pct_non_english = ifelse(is.nan(pct_non_english),NA,pct_non_english), #Turn nan to NA where denominator was zero.
pct_poverty = ifelse(is.nan(pct_poverty),NA,pct_poverty)) %>% #Turn nan to NA where denominator was zero.
mutate(waste_proximity = PNPL + PTSDF + PRMP,
Wastewater = percent_rank(Wastewater)) %>%
select(-PNPL, -PTSDF, -PRMP)
boundary_changes <- read.csv('Data/Boundary_Changes.csv')
basin_tracts_2 <- boundary_changes %>%
select(GEOID_TRACT_20,AREALAND_TRACT_20,GEOID_TRACT_10,AREALAND_TRACT_10,AREALAND_PART) %>%
mutate(pct20 = round(AREALAND_PART / AREALAND_TRACT_20,2),
GEOID_TRACT_10 = as.character(GEOID_TRACT_10),
GEOID_TRACT_20 = as.character(GEOID_TRACT_20)) %>%
right_join(.,cpc_basin %>% select(health_hazard_index,GEOID),by=join_by(GEOID_TRACT_10==GEOID)) %>%
mutate(weighted_index = round(pct20 * health_hazard_index,2)) %>%
st_drop_geometry() %>%
group_by(GEOID_TRACT_20) %>%
summarise(health_hazard_index = sum(weighted_index)) %>%
rename(GEOID = GEOID_TRACT_20) %>%
left_join(basin_tracts_2,.,by='GEOID')
basin_tracts_2_4269 <- basin_tracts_2 %>% st_transform(4269)
basin_tracts_2 %>%
st_drop_geometry() %>%
dplyr::select(PM25,OZONE,DSLPM,RESP,PTRAF) %>%
correlate() %>%
autoplot() +
geom_text(aes(label = round(r,digits=2)), size = 3.5, order = "hclust", type = "upper", tl.cex = 3)
ggsave('outputs/corplot1.png')
create_map1 <- function(col,t){
ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=basin_tracts_2,aes(fill={{col}}),color='transparent')+
scale_fill_viridis_c(option='rocket',direction=-1)+
geom_sf(data=states1,fill='transparent',color='gray20',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))+
labs(title = t)
}
m1 <- create_map1(PM25,'Particulate Matter')
m2 <- create_map1(OZONE,'Ozone')
m3 <- create_map1(DSLPM,'Disel Particulate Matter')
m4 <- create_map1(RESP,'Respiratory Hazard Index')
m5 <- create_map1(PTRAF,'Traffic Proximity and Volume')
grid.arrange(nrow=2,m1,m2,m3,m4,m5)
g <- arrangeGrob(nrow=2,m1,m2,m3,m4,m5) #generates g
ggsave('outputs/air.png',g)
basin_air_no_geom <- basin_tracts_2 %>%
st_drop_geometry() %>%
dplyr::select(PM25,OZONE,DSLPM,RESP,PTRAF)
process <- preProcess(basin_air_no_geom, method=c("range"))
air_index <- predict(process, basin_air_no_geom) %>% rowMeans()
basin_tracts_2 <- cbind(basin_tracts_2,air_index)
create_map1(air_index,'Air Index')
ggsave('outputs/air_index.png',width=3.1,height=5)
create_map2 <- function(col,t){
ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=basin_tracts_2,aes(fill={{col}}),color='transparent')+
scale_fill_viridis_c(option='viridis',direction=-1,name='Percent')+
geom_sf(data=states1,fill='transparent',color='gray20',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))+
labs(title = t)
}
m1 <- create_map2(pct_minority,'Minority Pop.')
m2 <- create_map2(pct_non_english,'Language Barrier')
m3 <- create_map2(pct_poverty,'Poverty')
m4 <- create_map2(pct_no_university,'No University Degree')
grid.arrange(nrow=1,m1,m2,m3,m4)
g <- arrangeGrob(nrow=1,m1,m2,m3,m4) #generates g
ggsave('outputs/socio_demographics.png',g)
basin_tracts_3 <- basin_tracts_2 %>% erase_water()
tracts_flood <- read.csv('data/flood.csv') %>%
mutate(GEOID = as.character(GEOID))
basin_tracts_4 <- basin_tracts_3 %>%
left_join(.,tracts_flood,by='GEOID') %>%
mutate(flood_area = ifelse(is.na(flood_area),0,flood_area),
area = (as.numeric(st_area(.)) / 1000000),
flood_pct = flood_area / area * 100) %>%
st_drop_geometry() %>%
dplyr::select(GEOID,flood_pct) %>%
right_join(.,basin_tracts_2,by='GEOID') %>%
st_as_sf()
ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=basin_tracts_4,aes(fill=flood_pct),color='transparent')+
scale_fill_viridis_c(option='mako',direction=-1,name='Pct. of Tract in Flood Plain')+
geom_sf(data=states1,fill='transparent',color='gray20',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(legend.position="bottom")+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))
ggsave('outputs/flood.png')
zone_values <- read.csv('Data/fire.csv')
basin_tracts_4 <- basin_tracts_4 %>%
mutate(fire = zone_values$BP_PA * 100) %>%
drop_na()
ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=basin_tracts_4,aes(fill=fire),linewidth=0.2,color='transparent')+
scale_fill_viridis_c(option='inferno',direction=-1,name='% Likelihood of a WildFire')+
geom_sf(data=states1,fill='transparent',color='gray10',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(legend.position="bottom")+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))
ggsave('outputs/wildfire.png')
basin_tracts_final <- basin_tracts_4 %>%
select(flood_pct, pct_minority, pct_non_english, pct_poverty, pct_no_university, air_index, health_hazard_index, fire, waste_proximity, Wastewater) %>%
st_drop_geometry() %>%
drop_na()
process <- preProcess(basin_tracts_final, method=c("range"))
basin_tracts_final_scalled <- predict(process, basin_tracts_final)
basin_tracts_final_scalled %>%
st_drop_geometry() %>%
correlate() %>%
autoplot() +
geom_text(aes(label = round(r,digits=2)), size = 2.5, order = "hclust", type = "upper", tl.cex = 3)
set.seed(789)
wss <- c()
for (i in seq(from=2,to=25,by=1)) wss[i] <- sum(kmeans(basin_tracts_final_scalled, centers=i, nstart=25)$withinss)
bind <- cbind(clusters = seq(from=1,to=25,by=1),wss) %>%
as.data.frame() %>%
dplyr::filter(clusters > 1) %>%
mutate(wss_change = wss - lag(wss))
ggplot(data=bind)+
geom_line(aes(x=clusters,y=wss),linewidth=0.5,color='gray60')+
geom_point(aes(x=clusters,y=wss),size=1.5,color='gray60')+
geom_point(data = bind %>% filter(clusters == 9),aes(x=clusters,y=wss,label=clusters),size=2.5,color='red')+
geom_text(data = bind %>% filter(clusters != 9),aes(x=clusters + 0.2,y=wss + 10,label=clusters),size=3,color='gray60')+
geom_text(data = bind %>% filter(clusters == 9),aes(x=clusters + 0.3,y=wss + 15,label=clusters),size=5,color='red')+
scale_x_continuous(breaks=seq(from=2,to=25,by=1))+
labs(x='Number of Clusters',y='Within groups sum of squares')+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major.x= element_blank(),panel.grid.minor = element_blank(),axis.text.x = element_blank(),axis.ticks.x = element_blank())
set.seed(789)
pal = c('#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd')
clusters <- kmeans(basin_tracts_final_scalled, centers=9, nstart=25)$cluster
results <- cbind(basin_tracts_4 %>% select('geometry'),basin_tracts_final_scalled,clusters) %>%
erase_water(0.99)
ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=results,aes(fill=as.factor(clusters)),color='transparent')+
geom_sf(data=states1,fill='transparent',color='gray10',linewidth=0.5)+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))+
scale_fill_manual(values=pal,name='cluster')
cluster_medians <- results %>%
group_by(clusters) %>% st_drop_geometry() %>% summarise_all(median) %>% mutate_if(is.numeric, round, digits=2) %>% mutate(stat='Median')
cluster_means <- results %>%
group_by(clusters) %>% st_drop_geometry() %>% summarise_all(mean) %>% mutate_if(is.numeric, round, digits=2) %>% mutate(stat='Mean')
cluster_means_medians <- rbind(cluster_means,cluster_medians) %>%
pivot_longer(cols=c(-clusters,-stat),names_to='variable',values_to='value')
ggplot(data=cluster_means_medians)+
geom_bar(aes(y=as.factor(clusters),x=value,fill=stat),position="dodge", stat="identity")+
facet_wrap(~variable,nrow=2,scales='free')+
scale_y_discrete(guide = guide_axis(angle = 90),name='cluster')+
scale_x_continuous(limits=c(0,1),name='Min/Max Scalled Value')+
scale_fill_manual(name='Statistic',values=c('#66c2a5','#fc8d62'))+
theme_tufte()+
theme(axis.line=element_line())+
labs(title='Cluster Means and Medians by Variable')
quantiles <- sapply(basin_tracts_final_scalled, function(x) quantile(x, na.rm = TRUE,probs = c(0.25,0.5,0.75)))
cluster_medians %>%
select(-stat) %>%
kbl(col.names=c('Cluster','Flood Risk','Minority Population','Non English Speaking','Poverty','Limited Education','Air Quality Index','Health Hazard Index','Fire Risk','Waste Proximity','Wastewater')) %>%
kable_minimal() %>%
column_spec(2,background=ifelse(cluster_medians$flood_pct > quantiles[3,1],'red','white')) %>%
column_spec(3,background=ifelse(cluster_medians$pct_minority > quantiles[3,2],'red','white')) %>%
column_spec(4,background=ifelse(cluster_medians$pct_non_english > quantiles[3,3],'red','white')) %>%
column_spec(5,background=ifelse(cluster_medians$pct_poverty > quantiles[3,4],'red','white')) %>%
column_spec(6,background=ifelse(cluster_medians$pct_no_university > quantiles[3,5],'red','white')) %>%
column_spec(7,background=ifelse(cluster_medians$air_index > quantiles[3,6],'red','white')) %>%
column_spec(8,background=ifelse(cluster_medians$health_hazard_index > quantiles[3,7],'red','white')) %>%
column_spec(9,background=ifelse(cluster_medians$fire > quantiles[3,8],'red','white')) %>%
column_spec(10,background=ifelse(cluster_medians$waste_proximity > quantiles[3,9],'red','white')) %>%
column_spec(11,background=ifelse(cluster_medians$Wastewater > quantiles[3,10],'red','white'))
t <- quantiles %>% as_data_frame() %>%
cbind(.,stat=c('Q1','Median','Q3')) %>%
pivot_longer(-stat,names_to='variables',values_to='value')
medians <- t %>%
filter(stat == "Median")
q3 <- t %>%
filter(stat == "Q3")
results_long <- results %>%
st_drop_geometry() %>%
pivot_longer(-clusters,names_to='variables',values_to='value')
ggplot(data=results_long)+
geom_boxplot(aes(x=as.factor(clusters),y=value,fill=as.factor(clusters)))+
geom_hline(data=medians,aes(yintercept=value),color='orange',linewidth=1)+
geom_hline(data=q3,aes(yintercept=value),color='red',linewidth=1)+
scale_fill_manual(values=pal,name='Cluster')+
scale_x_discrete(name='Cluster')+
scale_y_continuous(name='Min/Max Scalled Value')+
facet_wrap(~variables,nrow=2)+
theme_bw()+
labs(title='Cluster Boxplots for Variables Included in Cluster Analysis',subtitle='Orange line indicates global median, red line indicates global upper quantile')
ggsave('outputs/image1.png')
cluster_mean <- function(cluster){
results %>%
st_drop_geometry() %>%
filter(clusters == cluster) %>%
summarize(across(-clusters, ~ quantile(., probs = c(0.25, 0.5, 0.75)))) %>%
mutate(clusters = cluster) %>%
cbind(., stat=c('Q1','Median','Q3'))}
flags <- map_dfr(c(1,2,3,4,5,6,7,8,9), ~ cluster_mean(.x)) %>%
pivot_longer(cols=c(-clusters,-stat), names_to='variables', values_to='values') %>%
left_join(., t %>% pivot_wider(id_cols=variables, names_from=stat),by='variables') %>%
mutate(flag = ifelse(stat == 'Median' & values > Q3, 1, NA),
flag = ifelse(stat == 'Q1' & values > Median, 1, NA),
flag = ifelse(stat == 'Q1' & values > Q3, 2, flag)) %>%
group_by(variables, clusters) %>%
summarize(flag = max(flag, na.rm = TRUE)) %>%
mutate(flag = ifelse(as.character(flag) == '-Inf', '', as.character(flag)))
flags_wide <- flags %>%
pivot_wider(id_cols = clusters, names_from = variables, values_from = flag)
flags_wide %>%
kbl(col.names = c('Cluster','Wastewater','Air Quality','Fire Risk','Flood Risk','Public Health Hazard','Minority Population','Limited Education','Non English Speaking','Poverty','Waste Proximity'),align="c") %>%
column_spec(2,color=ifelse(flags_wide$Wastewater == 2,'red',ifelse(flags_wide$Wastewater == 1,'red','white'))) %>%
column_spec(3,color=ifelse(flags_wide$air_index == 2,'red',ifelse(flags_wide$air_index == 1,'red','white'))) %>%
column_spec(4,color=ifelse(flags_wide$fire == 2,'red',ifelse(flags_wide$fire == 1,'red','white'))) %>%
column_spec(5,color=ifelse(flags_wide$flood_pct == 2,'red',ifelse(flags_wide$flood_pct == 1,'red','white'))) %>%
column_spec(6,color=ifelse(flags_wide$health_hazard_index == 2,'red',ifelse(flags_wide$health_hazard_index == 1,'red','white'))) %>%
column_spec(7,color=ifelse(flags_wide$pct_minority == 2,'red',ifelse(flags_wide$pct_minority == 1,'red','white'))) %>%
column_spec(8,color=ifelse(flags_wide$pct_no_university == 2,'red',ifelse(flags_wide$pct_no_university == 1,'red','white'))) %>%
column_spec(9,color=ifelse(flags_wide$pct_non_english == 2,'red',ifelse(flags_wide$pct_non_english == 1,'red','white'))) %>%
column_spec(10,color=ifelse(flags_wide$pct_poverty == 2,'red',ifelse(flags_wide$pct_poverty == 1,'red','white'))) %>%
column_spec(11,color=ifelse(flags_wide$waste_proximity == 2,'red',ifelse(flags_wide$waste_proximity == 1,'red','white'))) %>%
kable_styling()
cluster_count <- results %>% group_by(clusters) %>% tally() %>%
st_drop_geometry()
ggplot(data=cluster_count)+
geom_bar(aes(x=as.factor(clusters),y=n),stat='identity',fill='orange',width=0.7)+
geom_text(aes(x=as.factor(clusters),y=n,label = n), nudge_y = -20)+
theme_tufte()+
scale_x_discrete(name='Cluster')+
scale_y_continuous('Number of Census Tracts')+
ggtitle('Number of Census Tracts in Each Cluster')
#This creates a csv file for biquery
results_4326 <- results %>% st_transform('EPSG:4326') %>%
mutate(geometry = st_as_text(geometry,EWKT=TRUE)) %>%
cbind(basin_tracts_4 %>% st_drop_geometry() %>% select(GEOID,NAME),.) %>%
st_drop_geometry()
write.csv(results_4326,'results_for_biquery.csv',row.names=FALSE)
counties <- rbind(tigris::counties(state='PA'),tigris::counties(state='DE'),tigris::counties(state='NJ'))
cluster_profile <- function(cluster){
results_filt <- results %>%
filter(clusters==cluster)
results_long_filt <- results_long %>%
filter(clusters==cluster)
cluster_medians_long <- cluster_medians %>%
select(-stat) %>%
pivot_longer(-clusters,names_to='variables',values_to='values') %>%
left_join(flags,by=c('variables','clusters'))
map <- ggplot()+
geom_sf(data=states_map,fill='gray95',color='transparent')+
geom_sf(data=results_filt,aes(fill=as.factor(clusters)),color='transparent')+
scale_fill_manual(values=pal,name='cluster')+
geom_sf(data=counties,color='grey70',fill='transparent')+
geom_sf(data=states1,fill='transparent',color='gray10',linewidth=0.5)+
geom_sf_text(data=counties,aes(label=NAME),size=2,color='gray30')+
xlim(xmin,xmax)+
ylim(ymin,ymax)+
theme_void()+
theme(panel.background = element_rect(fill = '#d3f6ff',color='transparent'))
plot <- ggplot(data = cluster_medians_long %>% filter(clusters==cluster))+
geom_bar(aes(x=variables,y=values,fill=flag),stat='identity',width=0.7)+
geom_point(data=medians,aes(x=variables,y=value,color='Median'))+
geom_point(data=q3,aes(x=variables,y=value,color='Q3'))+
scale_fill_manual(values=c('gray90','orange','red'),name='Cluster Median Compared to Basin Median',labels=c('Near/Below Median','Above Median','Signicantly Above Median'))+
scale_color_manual(name='Basin Median',values=c('lightblue','blue'))+
theme_tufte()+
scale_x_discrete(name='Variables',labels=c('Air Quality','Fire Risk','Flood Risk','Health Hazard Index','Minority Population','No University Degree','Limited English Profficiency','Poverty','Hazardous Waste Proximity','Wastewater Discharge'))+
scale_y_continuous(limits=c(0,1),name='Median Scalled Value')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
grid.arrange(map,plot,nrow=1,widths=c(6,12))
}
cluster_profile(1)
cluster_profile(2)
cluster_profile(3)
cluster_profile(4)
cluster_profile(5)
cluster_profile(6)
cluster_profile(7)
cluster_profile(8)
cluster_profile(9)
